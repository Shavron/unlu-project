{"version":3,"sources":["components/Feedcard.js","components/Modal.js","components/Error.js","components/Navbar.js","components/Feed.js","App.js","serviceWorker.js","index.js"],"names":["Feedcard","props","Card","className","onClick","getModalData","feed","Header","Title","event_name","Text","aria-hidden","moment","event_date","format","Image","src","thumbnail_image","thumbnail","Footer","Body","Link","likes","shares","views","React","memo","console","log","Modal","size","aria-labelledby","centered","closeButton","closemodal","id","Error","error","style","padding","color","fontSize","msg","toString","Navbar","class","sorttype","changeStatus","sortBy","Feed","useState","page","setPage","asc","setAsc","feeds","setFeed","sortData","setSortData","modalStatus","setModalStatus","clickedCardData","setClickedCardData","setError","ApiArray","useEffect","Object","keys","length","localStorage","setItem","JSON","stringify","clickOncard","navigator","onLine","window","addEventListener","h","parseInt","pageYOffset","fetch","cache","then","res","status","json","data","newArray","posts","uniqueArray","filter","thing","index","_thing","findIndex","obj","catch","e","tempData","getItem","parse","type","sort","a","b","scrollTo","behavior","top","assign","Container","marginTop","map","key","show","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.30347d45.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { Card, Image } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"../css/feed.css\";\n\nexport default function Feedcard(props) {\n  return (\n    <>\n      <Card className=\"\" onClick={() => props.getModalData(props.feed)}>\n        <Card.Header>\n          <Card.Title>{props.feed.event_name}</Card.Title>\n          <Card.Text className=\"text-muted\">\n            <i className=\"fa fa-clock-o\" aria-hidden=\"true\"></i>{\" \"}\n            {moment(props.feed.event_date).format(\"lll\")}\n          </Card.Text>\n        </Card.Header>\n        <Image src={props.feed.thumbnail_image} thumbnail />\n        {/* <Button variant=\"primary\">Go somewhere</Button> */}\n        <Card.Footer className=\"text-muted text-center\">\n          <Card.Body>\n            <Card.Link className=\"text-muted text-center\">\n              <i className=\"fa fa-heart\"> {props.feed.likes}</i>{\" \"}\n            </Card.Link>\n            <Card.Link className=\"text-muted text-center\">\n              <i className=\"fa fa-share\"> {props.feed.shares}</i>\n            </Card.Link>\n            <Card.Link className=\"text-muted text-center\">\n              <i className=\"fa fa-eye\"> {props.feed.views}</i>\n            </Card.Link>\n          </Card.Body>\n        </Card.Footer>\n      </Card>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Card, Image, Modal } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport \"../css/Modal.css\";\n\nexport default React.memo(function Model(props) {\n  console.log(props);\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Card>\n        <Modal.Header closeButton onClick={() => props.closemodal(false)}>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            {props.feed.event_name}\n            <br />\n            <Modal.Title className=\"text-muted\">\n              <p>\n                <i className=\"fa fa-clock-o\" aria-hidden=\"true\"></i>{\" \"}\n                {moment(props.feed.event_date).format(\"lll\")}\n              </p>\n            </Modal.Title>\n          </Modal.Title>\n        </Modal.Header>\n\n        <Image src={props.feed.thumbnail_image} thumbnail />\n        {/* <Button variant=\"primary\">Go somewhere</Button> */}\n        <Card.Footer className=\"text-muted text-center\">\n          <Card.Body>\n            <Card.Link className=\"text-muted text-center\">\n              <i className=\"fa fa-heart\"> {props.feed.likes}</i>{\" \"}\n            </Card.Link>\n            <Card.Link className=\"text-muted text-center\">\n              <i className=\"fa fa-share\"> {props.feed.shares}</i>\n            </Card.Link>\n            <Card.Link className=\"text-muted text-center\">\n              <i className=\"fa fa-eye\"> {props.feed.views}</i>\n            </Card.Link>\n          </Card.Body>\n        </Card.Footer>\n      </Card>\n    </Modal>\n  );\n});\n","import React from \"react\";\n\nexport default function Error({ error }) {\n  return (\n    <>\n      <div\n        className=\"card br text-center\"\n        style={{ padding: \"20px\", color: \"red\", fontSize: \"large\" }}\n      >\n        {error.msg.toString()}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nexport default function Navbar(props) {\n  return (\n    <nav class=\"navbar fixed-top navbar-light bg-light\">\n      <Card.Body className=\"text-muted\">\n        Sort&nbsp;\n        {props.sorttype ? (\n          <i\n            class=\"fa sort fa-sort-amount-asc\"\n            aria-hidden=\"true\"\n            onClick={props.changeStatus}\n          ></i>\n        ) : (\n          <i\n            class=\"fa sort fa-sort-amount-desc\"\n            aria-hidden=\"true\"\n            onClick={props.changeStatus}\n          ></i>\n        )}\n        {\"  \"}&nbsp;&nbsp;\n        <Card.Link onClick={() => props.sortBy(\"likes\")}>\n          <i className=\"fa fa-heart\" aria-hidden=\"true\">\n            {\" \"}\n            Likes\n          </i>{\" \"}\n        </Card.Link>\n        <Card.Link onClick={() => props.sortBy(\"shares\")}>\n          <i className=\"fa fa-share\" aria-hidden=\"true\">\n            {\" \"}\n            Shares\n          </i>\n        </Card.Link>\n        <Card.Link onClick={() => props.sortBy(\"views\")}>\n          <i className=\"fa fa-eye\" aria-hidden=\"true\">\n            {\" \"}\n            Views\n          </i>\n        </Card.Link>\n        <Card.Link onClick={() => props.sortBy(\"event_date\")}>\n          <i className=\"fa fa-clock-o\" aria-hidden=\"true\">\n            {\" \"}\n            Date\n          </i>\n        </Card.Link>\n      </Card.Body>\n    </nav>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport FeedCard from \"./Feedcard\";\nimport Modal from \"./Modal\";\nimport Error from \"./Error\";\nimport Navbar from \"./Navbar\";\n\nexport default function Feed() {\n  const [page, setPage] = useState(0);\n  const [asc, setAsc] = useState(true);\n  const [feeds, setFeed] = useState([]);\n  const [sortData, setSortData] = useState({});\n  const [modalStatus, setModalStatus] = useState(false);\n  const [clickedCardData, setClickedCardData] = useState({});\n  const [error, setError] = useState({ error: false, msg: \"\" });\n\n  const ApiArray = [\n    \"http://www.mocky.io/v2/59b3f0b0100000e30b236b7e\",\n    \"http://www.mocky.io/v2/59ac28a9100000ce0bf9c236\",\n    \"http://www.mocky.io/v2/59ac293b100000d60bf9c239\"\n  ];\n\n  useEffect(() => {\n    if (Object.keys(feeds).length) {\n      localStorage.setItem(\"feeds\", JSON.stringify(feeds));\n      setSortData(feeds);\n    }\n  }, [feeds]);\n\n  const clickOncard = feed => {\n    setClickedCardData(feed);\n    setModalStatus(true);\n  };\n\n  // const clickOnClose = status => {\n  //   setModalStatus(false);\n  // };\n\n  useEffect(() => {\n    if (navigator.onLine) {\n      window.addEventListener(\"scroll\", () => {\n        let h = parseInt(window.pageYOffset / 2100);\n        if (h && ApiArray.length > h && page != h) {\n          setPage(h);\n        }\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (!navigator.onLine) {\n      let tempData = localStorage.getItem(\"feeds\")\n        ? JSON.parse(localStorage.getItem(\"feeds\"))\n        : [];\n      if (tempData) {\n        setFeed(tempData);\n      }\n      setError({\n        error: true,\n        msg: \"Unable to connect to the internet !!\"\n      });\n    } else {\n      fetch(ApiArray[page], { cache: \"force-cache\" })\n        .then(res => {\n          if (res.status !== 200) {\n            setError({\n              error: true,\n              msg: \"Oops :) API ERROR\"\n            });\n          }\n          return res.json();\n        })\n        .then(data => {\n          // console.log(data);\n          // let tempData = localStorage.getItem(\"feeds\")\n          //   ? JSON.parse(localStorage.getItem(\"feeds\"))\n          //   : [];\n          let newArray = [...feeds, ...data.posts];\n\n          const uniqueArray = newArray.filter((thing, index) => {\n            const _thing = JSON.stringify(thing);\n            return (\n              index ===\n              newArray.findIndex(obj => {\n                return JSON.stringify(obj) === _thing;\n              })\n            );\n          });\n\n          setFeed(uniqueArray);\n          localStorage.setItem(\"feeds\", JSON.stringify(uniqueArray));\n        })\n        .catch(e => {\n          let tempData = localStorage.getItem(\"feeds\")\n            ? JSON.parse(localStorage.getItem(\"feeds\"))\n            : [];\n          if (tempData) {\n            setFeed(tempData);\n          } else {\n            setError({\n              error: true,\n              msg: \"Oops :) No data Available This Moment\"\n            });\n          }\n        });\n    }\n  }, [page]);\n\n  const handleSort = type => {\n    feeds.sort(function(a, b) {\n      return asc == false\n        ? b[type] > a[type]\n          ? 1\n          : b[type] < a[type]\n          ? -1\n          : 0\n        : b[type] < a[type]\n        ? 1\n        : b[type] > a[type]\n        ? -1\n        : 0;\n    });\n\n    window.scrollTo({ behavior: \"smooth\", top: 0 });\n    setSortData(Object.assign([], feeds));\n  };\n\n  // const handleStatus = () => {\n  //   setAsc(!asc);\n  // };\n\n  return (\n    <>\n      {sortData.length > 0 && (\n        <Navbar\n          sortBy={handleSort}\n          sorttype={asc}\n          changeStatus={() => setAsc(!asc)}\n        />\n      )}\n      <Container style={{ marginTop: \"65px\" }}>\n        {sortData.length > 0\n          ? sortData.map((feed, index) => {\n              return (\n                <FeedCard feed={feed} key={index} getModalData={clickOncard} />\n              );\n            })\n          : \"\"}\n        <Modal\n          show={modalStatus}\n          feed={clickedCardData}\n          closemodal={() => setModalStatus(false)}\n        />\n        {error.error ? <Error error={error} /> : \"\"}\n      </Container>\n    </>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Feed from \"./components/Feed\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <BrowserRouter>\n        {/* <Route\n          exact\n          path=\"/\"\n          render={props => <Feed {...props} title={`Props through render`} />}\n        /> */}\n        <Route exact path=\"/\" component={Feed} />\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\nserviceWorker.unregister();\n"],"sourceRoot":""}